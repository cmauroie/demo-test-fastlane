# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

#Constants
project_key = ENV['PROJECT_KEY']
sonar_login = ENV['SONAR_LOGIN']
sonar_url = ENV['SONAR_URL']
includes_path = File.expand_path("../app/build/")
source_path = File.expand_path("../app/src/main/java/com/fis/demotestfastline/")
sonar_args = "-Dsonar.coverage.jacoco.xmlReportPaths=#{includes_path}/reports/jacoco-full/xml/jacocoTestReport.xml" #Additional optional: -Dsonar.jacoco.reportPath=#{includes_path}/jacoco/testDebugUnitTest.exec

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Runs all the tests module one"
    lane :test_modole_one do
      gradle(task: "testModuleoneDebugUnitTest")
    end

  desc "Runs all the tests module two"
    lane :test_modole_two do
      gradle(task: "testModuletwoDebugUnitTest")
    end

  desc "Runs all the tests module three"
    lane :test_modole_three do
      gradle(task: "testModulethreeDebugUnitTest")
    end

  desc "Runs jacoco coverage test"
    lane :coverage_test do
      #Performs coverage report generation per module
      gradle(task: "jacocoReport --stacktrace")

      #Performs coverage report for all modules
      gradle(task: "jacocoFullReport --stacktrace")
    end

  desc "Executes sonarqube uploads"
      lane :sonar_report do
        #Performs test coverage
        coverage_test()

        #Performs sonarqube process
        sonar(
          project_key: "#{project_key}",
          project_version: "1.0",
          project_name: "#{project_key}",
          sources_path: "#{source_path}",
          sonar_runner_args: "#{sonar_args}",
          sonar_login: "#{sonar_login}",
          sonar_url: "#{sonar_url}"
        )
      end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end

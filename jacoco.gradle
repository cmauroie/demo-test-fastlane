def coveredProject = subprojects

apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
    ignoreFailures true
}

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.7"
    }

    task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = [
                '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*',
                '**/pokedroid/data/fragment/*.*', '**/pokedroid/data/type/*.*', '**/*Query.*', '**/*Query$*.*',
        ]
        def kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        def javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        def mainSrc = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    reports {
        xml.enabled = true
        xml.destination file("${project.rootDir}/app/build/reports/jacoco-full/xml/jacocoTestReport.xml")
        html.enabled = true
        html.destination file("${project.rootDir}/app/build/reports/jacoco-full/html")
    }

    //noinspection GrUnresolvedAccess
    dependsOn(coveredProject.jacocoReport)

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/com/example/databinding/*',
            '**/com/example/generated/callback/*',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/di/module/*',
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module.*', /* filtering Dagger modules classes */
            '**/*Dagger*.*',/* filtering Dagger-generated classes */
            '**/*MembersInjector*.*',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*', /* filtering `sealed` and `data` classes */
            '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
            '**/*Args*.*', /* filtering Navigation Component generated classes */
            '**/*Directions*.*' /* filtering Navigation Component generated classes */
    ]

    classDirectories.setFrom(files([
            fileTree(dir: "${project.rootDir}/app/build/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${project.rootDir}/moduleone/build/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${project.rootDir}/moduletwo/build/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${project.rootDir}/modulethree/build/tmp/kotlin-classes/debug", excludes: fileFilter)
    ]))

    def coverageSourceDirs = [
            "${project.rootDir}/app/src/main/java",
            "${project.rootDir}/moduleone/src/main/java",
            "${project.rootDir}/moduletwo/src/main/java",
            "${project.rootDir}/modulethree/src/main/java"
    ]
    additionalSourceDirs.setFrom(files(coverageSourceDirs))
    sourceDirectories.setFrom(files(coverageSourceDirs))

    def uiTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/", includes: ["**/*.ec"])

    executionData(files([
            "${project.rootDir}/app/build/jacoco/testDebugUnitTest.exec",
            uiTestsData,
            "${project.rootDir}/moduleone/build/jacoco/testDebugUnitTest.exec",
            "${project.rootDir}/moduletwo/build/jacoco/testDebugUnitTest.exec",
            "${project.rootDir}/modulethree/build/jacoco/testDebugUnitTest.exec",
    ]))

    /*def projects = coveredProject

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    def source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom(source)
    sourceDirectories.setFrom(source)

    classDirectories.setFrom(files(projects.jacocoReport.classDirectories))
    executionData.setFrom(files(projects.jacocoReport.executionData))

    reports {
        xml.enabled = true
        html.enabled = true
    }

    onlyIf = {
        true
    }
    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }*/
}